---
description: Guidelines for using google-adk
globs: 
alwaysApply: true
---
The Agent Development Kit (ADK) is a *Python framework* for building, evaluating, and deploying AI agents, particularly **LLM-based agents**. It emphasizes a **code-first**, modular approach, enabling the creation of simple agents or complex, hierarchical *multi-agent systems*.

The core component is the `Agent` (`0 # BaseAgent / LlmAgent`), representing an autonomous entity. `LlmAgent` specifically leverages an LLM (`7 # BaseLlm`) for reasoning and task execution. Agents operate within a `Session` (`3 # Session / BaseSessionService`), which maintains conversational history as a sequence of `Event`s (`4 # Event`) and persistent `State` (`9 # State`).

A `Runner` (`1 # Runner`) orchestrates agent execution within a `Session`. It receives user input, determines the appropriate agent to run, manages the interaction lifecycle, and interacts with services (Session, Artifact, Memory). The `Runner` creates an `InvocationContext` (`5 # InvocationContext`) for each turn, bundling necessary services, session data, and runtime configuration. This context is passed down through the agent hierarchy.

`LlmAgent`s utilize `Tool`s (`2 # BaseTool`) to interact with external systems, execute code, or access data. Tools are executed within a `ToolContext` (`8 # ToolContext`), which extends `InvocationContext` with tool-specific information and allows tools to modify session `State` or trigger actions recorded in `Event`s.

The interaction logic between an `LlmAgent` and its underlying `BaseLlm` (`7 # BaseLlm`) is encapsulated within a `BaseLlmFlow` (`6 # BaseLlmFlow`). This flow manages request/response processing, tool declaration/execution handling, and potentially planning or agent transfers.

Overall, ADK provides a structured environment for building sophisticated agents by composing these abstractions, managing state and context through sessions and invocation contexts, and enabling extensible capabilities via tools.


**Source Repository:** [https://github.com/google/adk-python.git](https://github.com/google/adk-python.git)

```mermaid
flowchart TD
    A0["Agent (BaseAgent / LlmAgent)"]
    A1["Runner"]
    A2["Tool (BaseTool)"]
    A3["Session (Session / BaseSessionService)"]
    A4["Event"]
    A5["InvocationContext"]
    A6["BaseLlmFlow"]
    A7["BaseLlm"]
    A8["ToolContext"]
    A9["State"]
    A1 -- "Executes" --> A0
    A1 -- "Manages Session via Service" --> A3
    A1 -- "Creates/Manages" --> A5
    A5 -- "Provides Context to" --> A0
    A0 -- "Uses" --> A2
    A0 -- "Uses Execution Logic" --> A6
    A6 -- "Interacts with" --> A7
    A6 -- "Generates" --> A4
    A2 -- "Runs Within" --> A8
    A8 -- "Extends" --> A5
    A8 -- "Accesses/Modifies" --> A9
    A3 -- "Contains History Of" --> A4
    A3 -- "Holds" --> A9
    A4 -- "Records Changes To" --> A9
```

## Chapters

[Runner](runner.mdc)
[Agent (BaseAgent / LlmAgent)](agent__baseagent___llmagent_.mdc)
[Session (Session / BaseSessionService)](session__session___basesessionservice_.mdc)
[State](state.mdc)
[Event](event.mdc)
[BaseLlm](basellm.mdc)
[Tool (BaseTool)](tool__basetool_.mdc)
[BaseLlmFlow](basellmflow.mdc)
[InvocationContext](invocationcontext.mdc)
[ToolContext](toolcontext.mdc)


---

Generated by [Rules for AI](https://github.com/altaidevorg/rules-for-ai)