---
description: google-adk tutorial on ToolContext, the context object passed to BaseTool execution, providing invocation details, state access, and the function_call_id.
globs: src/google/adk/tools/tool_context.py
alwaysApply: false
---
# Chapter 10: ToolContext

In the [previous chapter](invocationcontext.mdc), we learned about `InvocationContext`, the object encapsulating all necessary information for a single agent turn. While components like callbacks receive a `CallbackContext` that wraps `InvocationContext` and provides delta-aware state access, [Tools (BaseTool)](tool__basetool_.mdc) require slightly more specific information during their execution. This chapter introduces `ToolContext`, the specialized context object passed directly to a tool's `run_async` method.

## Motivation and Use Case

When an LLM decides to invoke a [Tool (BaseTool)](tool__basetool_.mdc), the framework needs to execute the tool's specific logic. This logic often requires:
1.  Access to the general turn context (session, services, etc.) provided by [InvocationContext](invocationcontext.mdc).
2.  Access to the session's [State](state.mdc), both for reading existing information and for recording changes made by the tool.
3.  A unique identifier linking this specific tool execution back to the LLM's function call request, especially if multiple tools might be called in parallel.
4.  A mechanism for the tool to signal outcomes or requirements back to the framework, such as state updates, artifact creation/updates, or the need for user authorization.

`ToolContext` fulfills these needs. It inherits from `CallbackContext`, giving it access to the delta-aware state and services. Crucially, it adds the `function_call_id` specific to the tool invocation and directly exposes the `actions` object (`EventActions`) for the tool to modify.

**Central Use Case:** A user asks an agent equipped with a `get_weather` tool: "What's the weather like in London?". The agent's [BaseLlmFlow](basellmflow.mdc) receives a `FunctionCall` from the LLM.
1.  The flow creates a `ToolContext` instance, passing the current [InvocationContext](invocationcontext.mdc) and the `id` from the `FunctionCall`.
2.  The flow calls `get_weather_tool.run_async(args={'location': 'London'}, tool_context=ctx)`.
3.  Inside `run_async`, the tool uses `ctx.function_call_id` for logging or associating results.
4.  It might read user preferences from state: `units = ctx.state.get(State.USER_PREFIX + 'weather_units', 'celsius')`.
5.  After fetching the weather (e.g., 15 degrees Celsius), it uses `ctx.actions.state_delta` to store the result: `ctx.state['last_weather_query'] = {'location': 'London', 'temp': 15, 'units': 'celsius'}`. (Remember, `ctx.state` writes to the delta in `ctx.actions`).
6.  The tool returns its primary result (e.g., the dictionary `{'location': 'London', 'temp': 15, 'units': 'celsius'}`).
7.  The flow uses the `function_call_id` from the context to correctly format the `FunctionResponse` and includes the `state_delta` captured in `ctx.actions` within the resulting [Event](event.mdc).

## Key Concepts

*   **Inheritance from `CallbackContext`:** `ToolContext` extends [`CallbackContext`](invocationcontext.mdc). This means it inherits properties and methods for accessing:
    *   Delta-aware [State](state.mdc) via the `state` property. Changes made via `ctx.state[...] = ...` are tracked in `ctx.actions.state_delta`.
    *   Services like `load_artifact`, `save_artifact` (which also updates `actions.artifact_delta`), and `search_memory`.
    *   Read-only access to the underlying [InvocationContext](invocationcontext.mdc) and its attributes (session details, user ID, etc.).
*   **`function_call_id` (str):** This attribute holds the unique identifier associated with the specific `types.FunctionCall` part generated by the LLM that triggered this tool's execution. This ID is essential for the framework (specifically the [BaseLlmFlow](basellmflow.mdc)) to correctly match the tool's result (`FunctionResponse`) back to the corresponding call, especially when handling parallel function calls.
*   **`actions` (`EventActions`):** `ToolContext` provides direct access to the `EventActions` object (`ctx.actions`) associated with the eventual `FunctionResponse` [Event](event.mdc). This allows the tool to directly populate fields like:
    *   `state_delta`: To record changes to session/user/app state.
    *   `artifact_delta`: Automatically updated by `ctx.save_artifact`.
    *   `requested_auth_configs`: Populated by calling `ctx.request_credential` if the tool requires authorization.
    *   `transfer_to_agent`: Allows the tool to signal a desire to transfer control (less common for standard tools, more relevant for `AgentTool`).
    *   `skip_summarization`: Flag indicating the tool response shouldn't be sent back to the LLM for summarization.
*   **Primary Tool Interface:** `ToolContext` is the main object a [Tool (BaseTool)](tool__basetool_.mdc) interacts with during its `run_async` execution to access context, manage state, and signal actions.

## How to Use `ToolContext`

The `ToolContext` instance is automatically created by the framework (typically the [BaseLlmFlow](basellmflow.mdc)) and passed as a keyword argument named `tool_context` to your tool's `run_async` method.

```python
# Example signature for a tool's execution method
from google.adk.tools import BaseTool, ToolContext
from typing import Any

class MyExampleTool(BaseTool):
    # ... __init__, name, description, _get_declaration ...

    async def run_async(
        self, *, args: dict[str, Any], tool_context: ToolContext
    ) -> Any:
        # Tool logic uses 'tool_context' here
        # ...
        return {"result": "some data"}
```
*Technical Explanation:* Your tool implementation receives the `ToolContext` instance as the `tool_context` parameter within its `run_async` method.

1.  **Accessing Context Identifiers:**

    ```python
    async def run_async(self, *, args: dict, tool_context: ToolContext) -> Any:
        inv_ctx = tool_context._invocation_context # Access underlying InvocationContext

        print(f"Executing Tool: {self.name}")
        print(f"  Function Call ID: {tool_context.function_call_id}")
        print(f"  Invocation ID: {inv_ctx.invocation_id}")
        print(f"  Agent Branch: {inv_ctx.branch}")
        # ... tool logic ...
        return {"status": "ok"}
    ```
    *Technical Explanation:* Access `tool_context.function_call_id` directly. Access general invocation details like `invocation_id` or `branch` via the underlying `tool_context._invocation_context`.

2.  **Reading and Writing State:**

    ```python
    from google.adk.sessions import State # For prefixes

    async def run_async(self, *, args: dict, tool_context: ToolContext) -> Any:
        # Read user preference
        preferred_location = tool_context.state.get(State.USER_PREFIX + "location")

        # Perform action based on args and preference
        query = args.get("query")
        result = f"Processed '{query}' for location '{preferred_location}'"

        # Write result back to session state
        # This modifies tool_context.actions.state_delta internally
        tool_context.state["last_query_result"] = result

        return {"processed_data": result}
    ```
    *Technical Explanation:* Use `tool_context.state.get(...)` or `tool_context.state[...]` to read state. Use `tool_context.state[...] = ...` to write state. The `ToolContext.state` property wraps the underlying session state and the `tool_context.actions.state_delta`, ensuring changes are recorded correctly.

3.  **Signaling Actions (Requesting Credentials):**

    ```python
    from google.adk.auth.auth_tool import AuthConfig # Example auth config

    async def run_async(self, *, args: dict, tool_context: ToolContext) -> Any:
        # Define the required auth configuration (e.g., OAuth)
        required_auth = AuthConfig(type="oauth", ...)

        # Check if valid credentials already exist (implementation depends on AuthHandler)
        # credential = tool_context.get_auth_response(required_auth)
        # if not is_credential_valid(credential):

        # Request the credential from the user/system
        print(f"Requesting credential for function call: {tool_context.function_call_id}")
        tool_context.request_credential(required_auth)

        # Return a specific indicator or raise an error if auth is needed now
        # The framework will handle the request based on actions.requested_auth_configs
        return {"status": "authorization_required"}

        # else:
        #   # Use credential ...
        #   return {"data": ...}
    ```
    *Technical Explanation:* Call `tool_context.request_credential(auth_config)`. This populates the `tool_context.actions.requested_auth_configs` dictionary, signaling to the framework that authorization is needed for this specific `function_call_id`.

4.  **Using Services:**

    ```python
    async def run_async(self, *, args: dict, tool_context: ToolContext) -> Any:
        # Load an input artifact
        input_part = tool_context.load_artifact("input_data.csv")
        if not input_part:
            return {"error": "Input artifact not found."}
        input_data = input_part.inline_data.data # Assuming inline data

        # Process data ...
        processed_data = input_data.decode() + "_processed"
        output_bytes = processed_data.encode()

        # Save an output artifact
        output_part = types.Part(inline_data=types.Blob(mime_type="text/plain", data=output_bytes))
        version = tool_context.save_artifact(filename="output_data.txt", artifact=output_part)
        print(f"Saved output artifact version: {version}")
        # tool_context.actions.artifact_delta is updated automatically

        # Search memory
        memory_results = tool_context.search_memory(query="related context")

        return {"output_artifact": "output_data.txt", "memory_hits": len(memory_results.results)}
    ```
    *Technical Explanation:* Use methods like `tool_context.load_artifact`, `tool_context.save_artifact`, and `tool_context.search_memory` directly. These methods leverage the services configured in the [Runner](runner.mdc) and passed down via the [InvocationContext](invocationcontext.mdc). `save_artifact` also automatically updates the `tool_context.actions.artifact_delta`.

## Internal Implementation

*   **Creation (`src/google/adk/flows/llm_flows/functions.py`):** `ToolContext` is typically instantiated within the function handling logic of the [BaseLlmFlow](basellmflow.mdc), specifically in the `_get_tool_and_context` helper function.

    ```python
    # Simplified from src/google/adk/flows/llm_flows/functions.py
    from ...tools.tool_context import ToolContext
    from ...agents.invocation_context import InvocationContext
    from ...tools.base_tool import BaseTool
    from google.genai import types

    def _get_tool_and_context(
        invocation_context: InvocationContext,
        function_call_event: Event, # The event containing the function call
        function_call: types.FunctionCall, # The specific FunctionCall part
        tools_dict: dict[str, BaseTool],
    ) -> tuple[BaseTool, ToolContext]:

        if function_call.name not in tools_dict:
            raise ValueError(f'Function {function_call.name} not found.')

        # Instantiate ToolContext
        tool_context = ToolContext(
            invocation_context=invocation_context,
            function_call_id=function_call.id,
            # A new EventActions is implicitly created if not passed
        )

        tool = tools_dict[function_call.name]

        return (tool, tool_context)
    ```
    *Technical Explanation:* The function retrieves the `invocation_context` and the specific `function_call` from the LLM response event. It then instantiates `ToolContext`, passing the `invocation_context` and the `function_call.id`. A new, empty `EventActions` object is typically created within the `ToolContext`'s `__init__` (as it inherits from `CallbackContext`) to capture actions specific to this tool call.

*   **Initialization (`src/google/adk/tools/tool_context.py`):** The `ToolContext` constructor initializes its parent (`CallbackContext`) and stores the `function_call_id`.

    ```python
    # Simplified from src/google/adk/tools/tool_context.py
    from ..agents.callback_context import CallbackContext
    from ..events.event_actions import EventActions
    from ..agents.invocation_context import InvocationContext
    from typing import Optional

    class ToolContext(CallbackContext):
        function_call_id: Optional[str] = None

        def __init__(
            self,
            invocation_context: InvocationContext,
            *,
            function_call_id: Optional[str] = None,
            event_actions: Optional[EventActions] = None, # Can be pre-populated
        ):
            # Call CallbackContext constructor to set up _invocation_context,
            # _event_actions, and _state (linked to _event_actions.state_delta)
            super().__init__(invocation_context, event_actions=event_actions)
            self.function_call_id = function_call_id

        @property
        def actions(self) -> EventActions:
            # Exposes the _event_actions managed by CallbackContext
            return self._event_actions

        # ... other methods like request_credential, get_auth_response ...
    ```
    *Technical Explanation:* The `__init__` method first calls the `super().__init__` (the `CallbackContext` constructor). This sets up the underlying `_invocation_context`, creates or accepts an `EventActions` object (`_event_actions`), and initializes the delta-aware `_state` linked to `_event_actions.state_delta`. It then stores the provided `function_call_id`. The `actions` property simply provides convenient access to the managed `_event_actions`.

*   **Sequence Diagram (Tool Execution with Context):**

    ```mermaid
    sequenceDiagram
        participant Flow as BaseLlmFlow
        participant FuncHandler as functions.py
        participant ToolCtx as ToolContext
        participant Tool as BaseTool
        participant Actions as EventActions
        participant StateObj as State

        Flow->>+FuncHandler: handle_function_calls_async(inv_ctx, event_with_fc, tools)
        FuncHandler->>FuncHandler: function_call = event_with_fc.get_function_calls()[0]
        FuncHandler->>ToolCtx: Create ToolContext(inv_ctx, function_call.id)
        Note right of ToolCtx: Initializes self.actions (EventActions)<br/>Initializes self.state (links to actions.state_delta)
        FuncHandler->>+Tool: run_async(args=..., tool_context=ToolCtx)
        Tool->>ToolCtx: Access function_call_id
        Tool->>StateObj: tool_context.state['new_key'] = 'new_value'
        StateObj->>Actions: Updates actions.state_delta (via ToolCtx._event_actions)
        Tool->>ToolCtx: tool_context.request_credential(auth_config)
        ToolCtx->>Actions: Updates actions.requested_auth_configs
        Tool-->>-FuncHandler: Return tool_result
        FuncHandler->>FuncHandler: Build response_event (using tool_result, ToolCtx.actions)
        FuncHandler-->>-Flow: function_response_event
    ```
    *Technical Explanation:* The diagram shows the flow creating the `ToolContext`. When the tool's `run_async` is called, it uses the `ToolContext` instance. Modifying `tool_context.state` or calling methods like `request_credential` updates the internal `EventActions` object held by the `ToolContext`. When the tool returns, the flow uses this `EventActions` object (accessed via `tool_context.actions`) to enrich the final `FunctionResponse` [Event](event.mdc).

## Conclusion

`ToolContext` serves as the crucial bridge between a [Tool's (BaseTool)](tool__basetool_.mdc) execution logic and the broader `google-adk` framework. By inheriting from `CallbackContext` and adding the specific `function_call_id` and direct access to `actions`, it provides tools with everything they need: general invocation details, delta-aware state management, service access, and the ability to signal required actions or outcomes like state changes and authorization requests. It ensures that tool executions are properly linked to their triggering request and that their side effects are correctly captured for persistence and further processing by the agent system.

This concludes the overview of the core components within the `google-adk` project structure provided. Understanding these building blocks - from the orchestrating [Runner](runner.mdc) and intelligent [Agent (BaseAgent / LlmAgent)](agent__baseagent___llmagent_.mdc), through the memory of [Session (Session / BaseSessionService)](session__session___basesessionservice_.mdc) and [State](state.mdc), the communication units of [Event](event.mdc), the power of the [BaseLlm](basellm.mdc), the capabilities of [Tools (BaseTool)](tool__basetool_.mdc), the control logic of [BaseLlmFlow](basellmflow.mdc), and the context carriers [InvocationContext](invocationcontext.mdc) and `ToolContext` - provides a solid foundation for developing sophisticated AI applications with this framework.


---

Generated by [Rules for AI](https://github.com/altaidevorg/rules-for-ai)