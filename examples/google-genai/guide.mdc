---
description: Guidelines for using google-genai
globs: 
alwaysApply: true
---
The `google-genai` Python SDK provides a high-level interface for developers to interact with Google's Generative AI APIs, specifically the **Gemini Developer API** and **Vertex AI**. It acts as a *client library*, abstracting the underlying HTTP communication and authentication complexities.

The core entry point is the `Client` (0), which serves as a *Facade* and *Factory*. It handles initial configuration (API keys, Vertex project/location, HTTP options) and provides access to various functional `API Modules` (1) (e.g., `client.models`, `client.chats`, `client.files`). These modules group related API operations (like `generate_content`, `send_message`, `upload`) and act as *Facades* for specific API subsets.

Internally, the `BaseApiClient` (2) manages direct HTTP requests using `httpx`, handling authentication (API key or Google Cloud credentials via `google-auth`), endpoint resolution (Gemini vs. Vertex), request/response serialization, and basic error handling by raising `APIError` (7) for non-200 responses.

Data exchange with the models revolves around the `Content / Part` (3) structures, representing multi-modal messages with roles and distinct data pieces (text, images, function calls/responses). `Transformers` (`t_` functions) (4) act as *Adapters*, converting between user-friendly SDK types (strings, PIL Images, Pydantic models, Python functions) and the raw API JSON structures, including handling resource name formatting and function schema generation.

For stateful conversations, `Chat / AsyncChat` (5) manages the message `history` (list of `Content` objects), simplifying multi-turn interactions by automatically appending messages and responses. `Pager / AsyncPager` (6) implements the *Pager* pattern, abstracting pagination logic for list operations (e.g., `models.list`). `Function Calling Utilities` (8) simplify the integration of external tools by automating the conversion between Python functions and API function declarations (`Tool`, `FunctionDeclaration`) and managing the invocation lifecycle (parsing `FunctionCall`, calling the function, formatting `FunctionResponse`). The SDK provides distinct synchronous and asynchronous (`aio`) interfaces for most functionalities.


**Source Repository:** [https://github.com/googleapis/python-genai](https://github.com/googleapis/python-genai)

```mermaid
flowchart TD
    A0["Client"]
    A1["API Modules (Models, Chats, Files, Tunings, Caches, Batches, Operations, Live)"]
    A2["BaseApiClient"]
    A3["Content / Part"]
    A4["Transformers (`t_` functions)"]
    A5["Chat / AsyncChat"]
    A6["Pager / AsyncPager"]
    A7["APIError"]
    A8["Function Calling Utilities"]
    A0 -- "Instantiates/Accesses" --> A1
    A0 -- "Configures/Uses" --> A2
    A1 -- "Uses for API calls" --> A2
    A1 -- "Processes/Returns" --> A3
    A1 -- "Uses for data transformation" --> A4
    A1 -- "Returns (for list methods)" --> A6
    A2 -- "Raises" --> A7
    A4 -- "Converts to/from" --> A3
    A4 -- "Converts function declarations" --> A8
    A5 -- "Uses for generation" --> A1
    A5 -- "Manages history of" --> A3
    A8 -- "Handles function call/respo..." --> A3
```

## Chapters

[Client](client.mdc)
[Content / Part](content___part.mdc)
[API Modules (Models, Chats, Files, Tunings, Caches, Batches, Operations, Live)](api_modules__models__chats__files__tunings__caches__batches__operations__live_.mdc)
[Chat / AsyncChat](chat___asyncchat.mdc)
[Function Calling Utilities](function_calling_utilities.mdc)
[Pager / AsyncPager](pager___asyncpager.mdc)
[Transformers (`t_` functions)](transformers___t___functions_.mdc)
[BaseApiClient](baseapiclient.mdc)
[APIError](apierror.mdc)


---

Generated by [Rules for AI](https://github.com/altaidevorg/rules-for-ai)